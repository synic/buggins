// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package store

import (
	"context"
	"strings"
)

const createSeenObservation = `-- name: CreateSeenObservation :one
insert
  or ignore into seen_observation (id)
    values (?)
  returning
    id, created_at, updated_at
`

func (q *Queries) CreateSeenObservation(ctx context.Context, id int64) (SeenObservation, error) {
	row := q.db.QueryRowContext(ctx, createSeenObservation, id)
	var i SeenObservation
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const findObservationsByIds = `-- name: FindObservationsByIds :many
select
  id, created_at, updated_at
from
  seen_observation
where
  id in (/*SLICE:ids*/?)
`

func (q *Queries) FindObservationsByIds(ctx context.Context, ids []int64) ([]SeenObservation, error) {
	query := findObservationsByIds
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeenObservation
	for rows.Next() {
		var i SeenObservation
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
