// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package store

import (
	"context"
	"strings"
)

const createModuleConfiguration = `-- name: CreateModuleConfiguration :one
insert into module_configuration (module, key, options)
  values (?, ?, ?)
returning
  module, "key", options
`

type CreateModuleConfigurationParams struct {
	Module  string      `json:"module"`
	Key     string      `json:"key"`
	Options interface{} `json:"options"`
}

func (q *Queries) CreateModuleConfiguration(ctx context.Context, arg CreateModuleConfigurationParams) (ModuleConfiguration, error) {
	row := q.db.QueryRowContext(ctx, createModuleConfiguration, arg.Module, arg.Key, arg.Options)
	var i ModuleConfiguration
	err := row.Scan(&i.Module, &i.Key, &i.Options)
	return i, err
}

const createSeenObservation = `-- name: CreateSeenObservation :one
insert
  or ignore into seen_observation (id, channel_id, project_id)
    values (?, ?, ?)
  returning
    id, channel_id, project_id, created_at, updated_at
`

type CreateSeenObservationParams struct {
	ID        int64  `json:"id"`
	ChannelID string `json:"channel_id"`
	ProjectID int64  `json:"project_id"`
}

func (q *Queries) CreateSeenObservation(ctx context.Context, arg CreateSeenObservationParams) (SeenObservation, error) {
	row := q.db.QueryRowContext(ctx, createSeenObservation, arg.ID, arg.ChannelID, arg.ProjectID)
	var i SeenObservation
	err := row.Scan(
		&i.ID,
		&i.ChannelID,
		&i.ProjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteModuleConfiguration = `-- name: DeleteModuleConfiguration :one
delete from module_configuration
where module = ?
  and key = ?
returning
  module, "key", options
`

type DeleteModuleConfigurationParams struct {
	Module string `json:"module"`
	Key    string `json:"key"`
}

func (q *Queries) DeleteModuleConfiguration(ctx context.Context, arg DeleteModuleConfigurationParams) (ModuleConfiguration, error) {
	row := q.db.QueryRowContext(ctx, deleteModuleConfiguration, arg.Module, arg.Key)
	var i ModuleConfiguration
	err := row.Scan(&i.Module, &i.Key, &i.Options)
	return i, err
}

const findIsMessageFeatured = `-- name: FindIsMessageFeatured :one
select
  exists (
    select
      1
    from
      featured_message
    where
      channel_id = ?
      and message_id = ?
      and guild_id = ?
    limit 1)
`

type FindIsMessageFeaturedParams struct {
	ChannelID string `json:"channel_id"`
	MessageID string `json:"message_id"`
	GuildID   string `json:"guild_id"`
}

func (q *Queries) FindIsMessageFeatured(ctx context.Context, arg FindIsMessageFeaturedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, findIsMessageFeatured, arg.ChannelID, arg.MessageID, arg.GuildID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const findModuleConfiguration = `-- name: FindModuleConfiguration :one
select
  module, "key", options
from
  module_configuration
where
  module = ?
  and key = ?
`

type FindModuleConfigurationParams struct {
	Module string `json:"module"`
	Key    string `json:"key"`
}

func (q *Queries) FindModuleConfiguration(ctx context.Context, arg FindModuleConfigurationParams) (ModuleConfiguration, error) {
	row := q.db.QueryRowContext(ctx, findModuleConfiguration, arg.Module, arg.Key)
	var i ModuleConfiguration
	err := row.Scan(&i.Module, &i.Key, &i.Options)
	return i, err
}

const findModuleConfigurations = `-- name: FindModuleConfigurations :many
select
  module, "key", options
from
  module_configuration
where
  module = ?
`

func (q *Queries) FindModuleConfigurations(ctx context.Context, module string) ([]ModuleConfiguration, error) {
	rows, err := q.db.QueryContext(ctx, findModuleConfigurations, module)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ModuleConfiguration
	for rows.Next() {
		var i ModuleConfiguration
		if err := rows.Scan(&i.Module, &i.Key, &i.Options); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findObservations = `-- name: FindObservations :many
select
  id, channel_id, project_id, created_at, updated_at
from
  seen_observation
where
  project_id = ?1
  and channel_id = ?2
  and id in (/*SLICE:id*/?)
`

type FindObservationsParams struct {
	ProjectID int64   `json:"project_id"`
	ChannelID string  `json:"channel_id"`
	ID        []int64 `json:"id"`
}

func (q *Queries) FindObservations(ctx context.Context, arg FindObservationsParams) ([]SeenObservation, error) {
	query := findObservations
	var queryParams []interface{}
	queryParams = append(queryParams, arg.ProjectID)
	queryParams = append(queryParams, arg.ChannelID)
	if len(arg.ID) > 0 {
		for _, v := range arg.ID {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:id*/?", strings.Repeat(",?", len(arg.ID))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:id*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeenObservation
	for rows.Next() {
		var i SeenObservation
		if err := rows.Scan(
			&i.ID,
			&i.ChannelID,
			&i.ProjectID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveFeaturedMessage = `-- name: SaveFeaturedMessage :one
insert
  or ignore into featured_message (message_id, channel_id, guild_id)
    values (?, ?, ?)
  returning
    guild_id, channel_id, message_id, created_at, updated_at
`

type SaveFeaturedMessageParams struct {
	MessageID string `json:"message_id"`
	ChannelID string `json:"channel_id"`
	GuildID   string `json:"guild_id"`
}

func (q *Queries) SaveFeaturedMessage(ctx context.Context, arg SaveFeaturedMessageParams) (FeaturedMessage, error) {
	row := q.db.QueryRowContext(ctx, saveFeaturedMessage, arg.MessageID, arg.ChannelID, arg.GuildID)
	var i FeaturedMessage
	err := row.Scan(
		&i.GuildID,
		&i.ChannelID,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateModuleConfiguration = `-- name: UpdateModuleConfiguration :one
update
  module_configuration
set
  options = ?
where
  key = ?
  and module = ?
returning
  module, "key", options
`

type UpdateModuleConfigurationParams struct {
	Options interface{} `json:"options"`
	Key     string      `json:"key"`
	Module  string      `json:"module"`
}

func (q *Queries) UpdateModuleConfiguration(ctx context.Context, arg UpdateModuleConfigurationParams) (ModuleConfiguration, error) {
	row := q.db.QueryRowContext(ctx, updateModuleConfiguration, arg.Options, arg.Key, arg.Module)
	var i ModuleConfiguration
	err := row.Scan(&i.Module, &i.Key, &i.Options)
	return i, err
}
